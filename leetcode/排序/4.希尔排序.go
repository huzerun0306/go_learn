package main

import "fmt"

/*
希尔排序先分几个希尔序列，比如用{n/2,n/4,n/8,1}这样，然后把数组分成对应的n/2组，加入有数组[5,2,3,1,4,6]
那么就分成n/2=3组，就是[5,1],[2,4],[3,6]三组，然后分别给三组排序。第二次就把[1,2,3,5,4,6]排序，这次
是3/2=1,分成一组那就直接是[1,2,3,5,4,6]然后排序，这样从大局观把这个数组排序好，希尔排序其实是插入排序
的一种优化，如果一个数组是倒叙，那么插入排序会造成更多的比较和移动，希尔排序通过分组和跳跃式的策略让数组
的比较和移动减少
*/

func xepx(arr []int) []int {
	//[5,2,3,1,4,6,8,7] 4 [5,4],[2,6],[3,8],[1,7]  [4,2,3,1,5,6,8,7] [4,3,5,8],[2,1,6,7]
	// 2,4,6 -> 0;2/0;
	for step := len(arr) / 2; step > 0; step /= 2 {
		//开始插入排序
		for i := step; i < len(arr); i += step {
			//满足条件则插入
			for j := i - step; j >= 0 && arr[j+step] < arr[j]; j -= step {
				arr[j], arr[j+step] = arr[j+step], arr[j]
				fmt.Println(i, j)
				fmt.Println(arr)
			}
		}
	}
	return arr
}
func main() {
	a := []int{5, 2, 3, 1, 4, 6, 8, 7}
	fmt.Println(xepx(a))
}
