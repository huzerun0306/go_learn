package main

import "fmt"

/*
选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，
存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。
以此类推，直到所有元素均排序完毕。

2.1 算法描述
n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。具体算法描述如下：
初始状态：无序区为R[1..n]，有序区为空；
第i趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区；
n-1趟结束，数组有序化了。

其实就是每一轮循环找一个最大值，然后把他和最后一个位置的数字换一下。
时间复杂度 O(n^2)  最好复杂度O(n^2)   空间复杂度O(1)  稳定性：不稳定

选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二
小的，依次类推，直到第n - 1个元素，第n个元素不用选择了，因为只剩下它一个最大的元素了。那么，在一趟选择，
如果当前元素比一个元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么交换后稳定性就被破坏了。
比较拗口，举个例子，序列5 8 5 2 9，我们知道第一遍选择第1个元素5会和2交换，那么原序列中2个5的相对前后
顺序就被破坏了，所以选择排序不是一个稳定的排序算法。
*/
func findBig(arr []int) int {
	var maxNum, maxIndex int
	for i := 0; i < len(arr); i++ {
		if arr[i] > maxNum {
			maxNum = arr[i]
			maxIndex = i
		}
	}
	return maxIndex
}
func xzpx(arr []int) []int {
	for i := 0; i < len(arr)-1; i++ {
		maxIndex := findBig(arr[:len(arr)-i])
		arr[len(arr)-1-i], arr[maxIndex] = arr[maxIndex], arr[len(arr)-1-i]
	}
	return arr
}
func main() {
	a := []int{1, 2, 4, 3, 6}
	fmt.Println(xzpx(a))
}
