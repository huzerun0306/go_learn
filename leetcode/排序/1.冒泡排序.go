package main

import "fmt"

/*
冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们
交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来
是因为越小的元素会经由交换慢慢“浮”到数列的顶端。

1.1 算法描述
比较相邻的元素。如果第一个比第二个大，就交换它们两个；
对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；
针对所有的元素重复以上的步骤，除了最后一个；
重复步骤1~3，直到排序完成。

其实就是每轮循环以此比较两个数字，大的往后，然后一直排到最后一位，最大的就在最后面，然后下一轮循环，这轮
就可以吧刚刚排完序的去掉，循环n-1轮。 最好复杂度是因为第一轮依次排序两个数字，发现都没有变化，说明他们
本身就是正序的，就不要执行剩下n-2论，就是外面那层循环了
时间复杂度 O(n^2)  最好复杂度O(n)   空间复杂度O(1)  稳定性：稳定

冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。
所以，如果两个元素相等，我想你是不会再无聊地把他们俩交换一下的；如果两个相等的元素没有相邻，那么即使通
过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种
稳定排序算法。
*/
func mppx(arr []int) []int {
	for i := 0; i < len(arr)-1; i++ {
		for j := 1; j < len(arr)-i; j++ {
			if arr[j-1] > arr[j] {
				arr[j-1], arr[j] = arr[j], arr[j-1]
			}
		}
	}
	return arr
}

//最优时间复杂度药这样
func mppxz(arr []int) []int {
	for i := 0; i < len(arr)-1; i++ {
		pxkey := false
		for j := 1; j < len(arr)-i; j++ {
			if arr[j-1] > arr[j] {
				arr[j-1], arr[j] = arr[j], arr[j-1]
				pxkey = true
			}
		}
		if pxkey == false {
			return arr
		}
	}
	return arr
}
func main() {
	a := []int{1, 2, 3, 5, 4}
	mppx(a)
	fmt.Println(a)
}
